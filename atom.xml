<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Ruily blog]]></title>
  <subtitle><![CDATA[reading and Writing]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.turegeek.com//"/>
  <updated>2016-02-29T09:58:29.000Z</updated>
  <id>http://www.turegeek.com//</id>
  
  <author>
    <name><![CDATA[Ruily Zhu]]></name>
    <email><![CDATA[ruilyforcn@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[关于HTTPS的一些基础知识]]></title>
    <link href="http://www.turegeek.com/2016/02/26/%E5%85%B3%E4%BA%8Ehttps%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.turegeek.com/2016/02/26/关于https的一些基础知识/</id>
    <published>2016-02-25T16:00:00.000Z</published>
    <updated>2016-02-29T09:58:29.000Z</updated>
    <content type="html"><![CDATA[<p>由于通过Http协议传输的数据都是未加密的明文传输,这样会引起第三方伪造客户端与服务端通信、篡改请求数据、获取接口数据内容，由于http传输敏感数据的不安全性,因此在http协议的基础上通过SSL/TLS对传输数据进行加密.</p>
<a id="more"></a>
<h4 id="HTTPS_u8BC1_u4E66"><a href="#HTTPS_u8BC1_u4E66" class="headerlink" title="HTTPS证书"></a>HTTPS证书</h4><p>https需要证书去验证服务器的合法性,也有的安全性比较高的应用采用双向证书认证。Https证书分为CA机构颁发的证书以及自签名的证书也就是自己生成的证书,12306网站就是自签名证书</p>
<h4 id="HTTPS_u4E00_u822C_u4F7F_u7528_u7684_u52A0_u5BC6_u7B97_u6CD5"><a href="#HTTPS_u4E00_u822C_u4F7F_u7528_u7684_u52A0_u5BC6_u7B97_u6CD5" class="headerlink" title="HTTPS一般使用的加密算法"></a>HTTPS一般使用的加密算法</h4><p>非对称加密算法:RSA,DSA/DSS<br>对称加密算法:AES、RC4、3DES<br>HASH算法:MD5、SHA1、SHA256</p>
<h4 id="HTTPS_u5DE5_u4F5C_u539F_u7406"><a href="#HTTPS_u5DE5_u4F5C_u539F_u7406" class="headerlink" title="HTTPS工作原理"></a>HTTPS工作原理</h4><p>Https在传输数据之前与服务器进行一次握手首先告诉服务器我这边支持SSL的版本、可以使用的加密方法,你服务器把证书发过来我客户端来验验,然后服务器回应奥你这个SSL版本我支持,加密算法我们就用XXX,证书信息也给你,客户端收到回应后验了验证书，恩没问题,奥用这个加密算法,成！随后告诉服务器那咱既然商量好了 我客户端下面发的数据就用我们约定好的算法加密,你到时候解密就成了,具体如下。</p>
<h5 id="u5BA2_u6237_u7AEF"><a href="#u5BA2_u6237_u7AEF" class="headerlink" title="客户端"></a>客户端</h5><ul>
<li>生成随机数A</li>
<li>支持的SSL/TLS版本号</li>
<li>支持的加密算法</li>
</ul>
<h5 id="u670D_u52A1_u5668"><a href="#u670D_u52A1_u5668" class="headerlink" title="服务器"></a>服务器</h5><ul>
<li>确认SSL/TLS版本</li>
<li>生成随机数B</li>
<li>确认使用哪个加密算法与HASH算法</li>
<li>服务器证书(网站地址、加密公钥、证书颁发的机构信息) </li>
</ul>
<h5 id="u5BA2_u6237_u7AEF-1"><a href="#u5BA2_u6237_u7AEF-1" class="headerlink" title="客户端"></a>客户端</h5><ul>
<li>验证证书,包括证书颁发机构的合法性,发行者证书的公钥能否正确解开服务器证书的数字签名,网站地址是否与当前地址一致等</li>
<li>生成随机数C,使用证书里的加密公钥加密,生成密码,防止被窃取</li>
<li>(option)如果在双向认证的情况下,需要客户端生成随机数并进行数据签名并和客户端的证书一起传给服务器</li>
<li>使用确认好的HASH算法计算握手信息,并使用随机数C进行加密,并把之前所有生成的信息发送给服务器标示<br>客户端握手阶段结束,以后的信息将按约定好的规则加密发送</li>
</ul>
<h5 id="u670D_u52A1_u5668-1"><a href="#u670D_u52A1_u5668-1" class="headerlink" title="服务器"></a>服务器</h5><ul>
<li>(option)如果客户端发送证书,服务器验证合法性</li>
<li>使用自己的私钥解密出密码,然后使用密码解密客户端计算的握手信息,并验证HASH</li>
<li>使用密码加密握手信息并响应给客户端告知服务器握手阶段结束,下面开始使用约定好的解密规则通信</li>
</ul>
<h5 id="u5BA2_u6237_u7AEF-2"><a href="#u5BA2_u6237_u7AEF-2" class="headerlink" title="客户端"></a>客户端</h5><p>解密并验证HASH值,握手结束,开始使用加密的数据进行http通信</p>
<h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><p>在SSL握手的过程中总共产生了三个随机数,使用来保证密钥产生的随机性.最后也是通过这三个随机数生成一个对称密钥用于HTTP通信中对数据的加密解密、验证数据的完整性等.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于通过Http协议传输的数据都是未加密的明文传输,这样会引起第三方伪造客户端与服务端通信、篡改请求数据、获取接口数据内容，由于http传输敏感数据的不安全性,因此在http协议的基础上通过SSL/TLS对传输数据进行加密.</p>]]>
    
    </summary>
    
      <category term="HTTPS" scheme="http://www.turegeek.com/tags/HTTPS/"/>
    
      <category term="android" scheme="http://www.turegeek.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于使用WebView的一些坑和经验]]></title>
    <link href="http://www.turegeek.com/2016/01/26/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8webview%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E5%92%8C%E7%BB%8F%E9%AA%8C/"/>
    <id>http://www.turegeek.com/2016/01/26/关于使用webview的一些坑和经验/</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2016-01-26T08:31:33.000Z</updated>
    <content type="html"><![CDATA[<p>WebView是基于webkit引擎展现web页面的控件,而且越来越多项目在使用hybrid模式,因此我们在日常开发中不可避免的回合WebView打交道,也会碰到各种各样的问题,有可能是手机系统版本问题,机型兼容问题,耗电问题,安全漏洞问题,资源释放问题,还罗列一些WebView的小功能点,因此特地总结一下,用来提高开发效率.</p>
<a id="more"></a>
<h2 id="WebView_u6E05_u7A7A_u5386_u53F2_u8BB0_u5F55"><a href="#WebView_u6E05_u7A7A_u5386_u53F2_u8BB0_u5F55" class="headerlink" title="WebView清空历史记录"></a>WebView清空历史记录</h2><p>WebView有提供clearHistory功能,但是要在onPageFinished()方法里调用才能调用goback方法,这样就略死板,而且加载一个url的时候有可能多次调用,因此查了下资料找到了一种解决办法</p>
<pre><code>clearView()
This method was deprecated in API level 18. Use WebView.loadUrl(&quot;about:blank&quot;) to
reliably reset the view state and release page resources (including any running 
JavaScript)
</code></pre><p>WebView.clearView()在api18以后被废弃,可以使用WebView.loadUrl(“about:blank”)代替</p>
<h2 id="WebView_u7684JS_u4EA4_u4E92_u4E0E_u5B89_u5168_u6027_u95EE_u9898"><a href="#WebView_u7684JS_u4EA4_u4E92_u4E0E_u5B89_u5168_u6027_u95EE_u9898" class="headerlink" title="WebView的JS交互与安全性问题"></a>WebView的JS交互与安全性问题</h2><p>总所周知,4.2以下的系统与本地交互可能会产生安全性问题,<br>具体可以通过<a href="http://drops.wooyun.org/papers/548" target="_blank" rel="external">WebView中接口隐患与手机挂马利用</a>了解.<br>这里推荐一个比较好的的解决方案</p>
<p><a href="https://github.com/pedant/safe-java-js-webview-bridge" target="_blank" rel="external">safe-java-js-webview-bridge</a></p>
<h2 id="u5173_u4E8E_u624B_u673A_u9875_u9762_u7684_u9002_u914D"><a href="#u5173_u4E8E_u624B_u673A_u9875_u9762_u7684_u9002_u914D" class="headerlink" title="关于手机页面的适配"></a>关于手机页面的适配</h2><p>同一个Web页面可能在不同的手机上显示的效果不一样,可以在HTML的head标签里添加</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;&gt;
</code></pre><p>通过设置width、height、initial-scale、当前手机屏幕密度等还适配当前的手机,具体参考<a href="http://developer.android.com/intl/zh-cn/guide/webapps/targeting.html" target="_blank" rel="external">Supporting Different Screens in Web Apps</a><br><a href="https://developer.chrome.com/multidevice/webview/pixelperfect" target="_blank" rel="external">Pixel-Perfect UI in the WebView</a></p>
<h2 id="u5982_u679C_u9875_u9762_u4E3Ahttps_2C_u56FE_u7247_u4E3Ahttp_u5730_u5740_u7684_u65F6_u50195-0+_u7CFB_u7EDF_u65E0_u6CD5_u52A0_u8F7D_u56FE_u7247"><a href="#u5982_u679C_u9875_u9762_u4E3Ahttps_2C_u56FE_u7247_u4E3Ahttp_u5730_u5740_u7684_u65F6_u50195-0+_u7CFB_u7EDF_u65E0_u6CD5_u52A0_u8F7D_u56FE_u7247" class="headerlink" title="如果页面为https,图片为http地址的时候5.0+系统无法加载图片"></a>如果页面为https,图片为http地址的时候5.0+系统无法加载图片</h2><p>5.0以上的系统默认屏蔽混合内容,需要开启setMixedContentMode(true)来支持非https文件的加载</p>
<h2 id="u52A0_u5FEBhtml_u52A0_u8F7D_u901F_u5EA6"><a href="#u52A0_u5FEBhtml_u52A0_u8F7D_u901F_u5EA6" class="headerlink" title="加快html加载速度"></a>加快html加载速度</h2><p>通过设置setLoadsImagesAutomatically(false)来关闭自动加载图片功能,保证页面加载出来在加载图片,只适用于API19以下不包括19,同时在onPageFinished里通过getLoadsImagesAutomatically()判断是否关闭,如果关闭则打开加载图片功能</p>
<h2 id="u81EA_u5B9A_u4E49_u52A0_u8F7D_u9519_u8BEF_u9875_u9762"><a href="#u81EA_u5B9A_u4E49_u52A0_u8F7D_u9519_u8BEF_u9875_u9762" class="headerlink" title="自定义加载错误页面"></a>自定义加载错误页面</h2><p>WebView在无网络状态下load网页会提示找不到网页而且还会暴露地址链接,我们可以在onReceivedError里面获取错误,然后可以load本地自定义错误页面</p>
<pre><code>String errorHtml = &quot;&lt;html&gt;&lt;body&gt;加载出错了!&lt;/body&gt;&lt;/html&gt;&quot;;
mWebView.stopLoading();
mWebView.loadData(errorHtml, &quot;text/html&quot;, &quot;UTF-8&quot;);
</code></pre><h2 id="WebView_u5360_u5185_u5B58_u95EE_u9898"><a href="#WebView_u5360_u5185_u5B58_u95EE_u9898" class="headerlink" title="WebView占内存问题"></a>WebView占内存问题</h2><ol>
<li>代码动态添加WebView(待验证)</li>
<li>在执行webView的ondestory之前,需要在当前布局remove WebView,因为可能会<br>碰到WebView.destroy() called while still attached的问题</li>
<li>在activity的onDestory调用webView.removeAllViews()、webView.onDestory()</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>WebView是基于webkit引擎展现web页面的控件,而且越来越多项目在使用hybrid模式,因此我们在日常开发中不可避免的回合WebView打交道,也会碰到各种各样的问题,有可能是手机系统版本问题,机型兼容问题,耗电问题,安全漏洞问题,资源释放问题,还罗列一些WebView的小功能点,因此特地总结一下,用来提高开发效率.</p>]]>
    
    </summary>
    
      <category term="WebView" scheme="http://www.turegeek.com/tags/WebView/"/>
    
      <category term="android" scheme="http://www.turegeek.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于MothonEvent里getAction与getActionMasked的区别]]></title>
    <link href="http://www.turegeek.com/2016/01/07/about-motionevent/"/>
    <id>http://www.turegeek.com/2016/01/07/about-motionevent/</id>
    <published>2016-01-06T16:00:00.000Z</published>
    <updated>2016-01-21T15:58:55.000Z</updated>
    <content type="html"><![CDATA[<p>我们经常在dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent中看到MotionEvent对象，通过这个对象我可以可以获取触摸事件然后进行相应的操作，触摸事件类型比较常用的就是ACTION_UP、ACTION_DOWN、ACTION_MOVE等。获取触摸点坐标有以下方法</p>
<pre><code>getX() 获取触摸点X轴坐标

getY() 获取触摸点Y轴坐标

getX(int pointerIndex)、getY(int pointerIndex) 在多点触控时获取对应手指的坐标

getRawX()、getRawY() 与getX()、getY()的区别是前者相对手机屏幕，后者相对当前控件
</code></pre><a id="more"></a>
<p>在获取MotionEvent的Action事件的时候，我们看到以下两个方法可以获取当前的事件:<br>getAction():<br><img src="http://ww4.sinaimg.cn/large/005KJayxjw1ezq82y8dcej30zk07ktaf.jpg" alt=""></p>
<p>getActionMasked():<br><img src="http://ww3.sinaimg.cn/large/005KJayxjw1ezq8541g8ej3104060myn.jpg" alt=""><br>两个方法的区别在于，getActionMasked方法中多了一个&amp;ACTION_MASK：</p>
<pre><code>public static final int ACTION_MASK = 0xff;
</code></pre><p>我们把nativeGetAction(mNativePtr)比作mActionValue也就是说mActionValue &amp; 0xff表示只要mActionValue的值在0x00-0xff之间的话，getAction与getActionMasked返回值是一样的，因为ff是十六进制转换成2进制就是11111111 与它相与的数只要小于等于它都是原值，&amp;(与)可以用作位运算符，例如1101 &amp; 1011 = 1001，按位进行比较两个都为1则为1，否则为0。</p>
<p>那什么时候两个方法返回的不一样呢？<br><br>肯定是返回的值大于0xff的时候。<br><br>那又是什么时候返回的值大于0xff呢？<br><br>答案就是多点触控的时候。<br></p>
<p>因为既然是多点触控，如果我们要获取某一点的触控信息怎么获取，肯定需要有一个索引，android就把索引的信息放在action高八位中存储，也就是说0x00-0xff代表的是当前触摸时间的类型，存放在action低八位中.一个字段存放两种信息.所以0xff=0x00ff，00代表高八位存储索引信息，ff代表事件类型，由此推论getAction()返回触摸事件类型，如果是多点触控则返回ACTION_POINTER_DOWN与索引信息的混合值，而getActionMasked()由于 &amp; 0xff(0x00ff)的操作，清空了索引信息，只返回ACTION_POINTER_DOWN的值，如果想单独获取索引信息的话可通过getActionIndex()方法。</p>
<pre><code> public static final int ACTION_POINTER_INDEX_MASK  = 0xff00;

 public static final int ACTION_POINTER_INDEX_SHIFT = 8;

 public final int getActionIndex() {
    return (nativeGetAction(mNativePtr) &amp; ACTION_POINTER_INDEX_MASK)
            &gt;&gt; ACTION_POINTER_INDEX_SHIFT;
}
</code></pre><p>通过上述代码可得知mActionValue &amp; ACTION_POINTER_INDEX_MASK(0xff00)会清空低八位的值也就是事件类型的值，只留下索引信息的值，再通过&gt;&gt; ACTION_POINTER_INDEX_SHIFT(8) 将值右移八位返回。</p>
<blockquote>
<h5 id="u5173_u4E8E_u9AD8_u516B_u4F4D_u4E0E_u4F4E_u516B_u4F4D_u7684_u4E00_u4E9B_u89E3_u91CA_3A"><a href="#u5173_u4E8E_u9AD8_u516B_u4F4D_u4E0E_u4F4E_u516B_u4F4D_u7684_u4E00_u4E9B_u89E3_u91CA_3A" class="headerlink" title="关于高八位与低八位的一些解释:"></a>关于高八位与低八位的一些解释:</h5><h5 id="u4E00_u822C_u6765_u8BF4_u5185_u5B58_u64CD_u4F5C_u90FD_u662F_u9488_u5BF9_u5185_u5B58_uFF0C_u4E5F_u5C31_u662F_u4E00_u4E2A_u5B57_u8282_uFF0C8_u4F4D_u3002_u5982_u679C_u662F16_u4F4D_u7684_u6307_u4EE4_uFF0C_u5C31_u662F_u540C_u65F6_u64CD_u4F5C_u8FDE_u7EED_u76842_u4E2A_u5185_u5B58_u5730_u5740_uFF0C_u5C06_u8FD9_u8FDE_u7EED_u76842_u4E2A_u5185_u5B58_u5730_u5740_u5F53_u6210_u4E00_u4E2A_u5355_u4F4D_uFF0C_u6240_u6709_u5C31_u6709_u9AD88_u4F4D_u548C_u4F4E8_u4F4D_u4E4B_u5206_u3002_u7531_u4E8E_u8BA1_u7B97_u673A_u4EC5_u8BC6_u522B_u4E8C_u8FDB_u5236_uFF0C_u6240_u4EE5_u5BF9_u4E00_u4E2A_u5185_u5B58_u5730_u5740_uFF0C_u4E5F_u5C31_u662F8_u4F4D_u4E8C_u8FDB_u5236_uFF0C_u5982_3A0000_0001_0000_u5C31_u662F_u9AD8_u56DB_u4F4D_uFF0C0001_u5C31_u662F_u4F4E_u56DB_u4F4D_uFF0C_u5F53_u71362_u4E2A_u5185_u5B58_u5730_u5740_uFF0C_u5C31_u662F16_u4F4D_u4E8C_u8FDB_u5236_uFF0C_u4E5F_u5C31_u662F_uFF1A0000_0001_0000_0002_uFF0C0000_0001__u5C31_u662F_u9AD8_u516B_u4F4D_uFF0C0000_0002_u5C31_u662F_u4F4E_u516B_u4F4D"><a href="#u4E00_u822C_u6765_u8BF4_u5185_u5B58_u64CD_u4F5C_u90FD_u662F_u9488_u5BF9_u5185_u5B58_uFF0C_u4E5F_u5C31_u662F_u4E00_u4E2A_u5B57_u8282_uFF0C8_u4F4D_u3002_u5982_u679C_u662F16_u4F4D_u7684_u6307_u4EE4_uFF0C_u5C31_u662F_u540C_u65F6_u64CD_u4F5C_u8FDE_u7EED_u76842_u4E2A_u5185_u5B58_u5730_u5740_uFF0C_u5C06_u8FD9_u8FDE_u7EED_u76842_u4E2A_u5185_u5B58_u5730_u5740_u5F53_u6210_u4E00_u4E2A_u5355_u4F4D_uFF0C_u6240_u6709_u5C31_u6709_u9AD88_u4F4D_u548C_u4F4E8_u4F4D_u4E4B_u5206_u3002_u7531_u4E8E_u8BA1_u7B97_u673A_u4EC5_u8BC6_u522B_u4E8C_u8FDB_u5236_uFF0C_u6240_u4EE5_u5BF9_u4E00_u4E2A_u5185_u5B58_u5730_u5740_uFF0C_u4E5F_u5C31_u662F8_u4F4D_u4E8C_u8FDB_u5236_uFF0C_u5982_3A0000_0001_0000_u5C31_u662F_u9AD8_u56DB_u4F4D_uFF0C0001_u5C31_u662F_u4F4E_u56DB_u4F4D_uFF0C_u5F53_u71362_u4E2A_u5185_u5B58_u5730_u5740_uFF0C_u5C31_u662F16_u4F4D_u4E8C_u8FDB_u5236_uFF0C_u4E5F_u5C31_u662F_uFF1A0000_0001_0000_0002_uFF0C0000_0001__u5C31_u662F_u9AD8_u516B_u4F4D_uFF0C0000_0002_u5C31_u662F_u4F4E_u516B_u4F4D" class="headerlink" title="一般来说内存操作都是针对内存，也就是一个字节，8位。如果是16位的指令，就是同时操作连续的2个内存地址，将这连续的2个内存地址当成一个单位，所有就有高8位和低8位之分。由于计算机仅识别二进制，所以对一个内存地址，也就是8位二进制，如:0000 0001 0000就是高四位，0001就是低四位，当然2个内存地址，就是16位二进制，也就是：0000 0001 0000 0002，0000 0001 就是高八位，0000 0002就是低八位"></a>一般来说内存操作都是针对内存，也就是一个字节，8位。如果是16位的指令，就是同时操作连续的2个内存地址，将这连续的2个内存地址当成一个单位，所有就有高8位和低8位之分。由于计算机仅识别二进制，所以对一个内存地址，也就是8位二进制，如:0000 0001 0000就是高四位，0001就是低四位，当然2个内存地址，就是16位二进制，也就是：0000 0001 0000 0002，0000 0001 就是高八位，0000 0002就是低八位</h5></blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们经常在dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent中看到MotionEvent对象，通过这个对象我可以可以获取触摸事件然后进行相应的操作，触摸事件类型比较常用的就是ACTION_UP、ACTION_DOWN、ACTION_MOVE等。获取触摸点坐标有以下方法</p>
<pre><code>getX() 获取触摸点X轴坐标

getY() 获取触摸点Y轴坐标

getX(int pointerIndex)、getY(int pointerIndex) 在多点触控时获取对应手指的坐标

getRawX()、getRawY() 与getX()、getY()的区别是前者相对手机屏幕，后者相对当前控件
</code></pre>]]>
    
    </summary>
    
      <category term="MothonEvent" scheme="http://www.turegeek.com/tags/MothonEvent/"/>
    
      <category term="android" scheme="http://www.turegeek.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[十个开源库分享(二)]]></title>
    <link href="http://www.turegeek.com/2016/01/06/open-source-02/"/>
    <id>http://www.turegeek.com/2016/01/06/open-source-02/</id>
    <published>2016-01-05T16:00:00.000Z</published>
    <updated>2016-01-21T16:21:57.000Z</updated>
    <content type="html"><![CDATA[<p>可以滑动的recyclerview CardItem、高效的Gif播放器、视觉差viewpager、自定义仪表盘、开源视频项目、GestureViews、图片选择库、Custome CoordinatorLayout、个性动态展示文字、基于materialDesign的开源项目</p>
<a id="more"></a>
<h3 id="SwipeableCard"><a href="#SwipeableCard" class="headerlink" title="SwipeableCard"></a><a href="https://github.com/michelelacorte/SwipeableCard" target="_blank" rel="external">SwipeableCard</a></h3><p>swipe card +recyclerView </p>
<p><img src="https://camo.githubusercontent.com/ba7339848db3b5e64570d9948ff63a52dd06cb7c/687474703a2f2f692e67697068792e636f6d2f336f38646f517876323843565447644d36512e676966" alt=""></p>
<h3 id="GifView"><a href="#GifView" class="headerlink" title="GifView"></a><a href="https://github.com/Cutta/GifView" target="_blank" rel="external">GifView</a></h3><p>播放gif的高效library,支持暂停开始停止</p>
<p><img src="https://camo.githubusercontent.com/19b4e43298746358948ac05ce184fa4d99029159/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f3236745073594c356841344945474166752f67697068792e676966" alt=""></p>
<h3 id="RealParallaxAndroid"><a href="#RealParallaxAndroid" class="headerlink" title="RealParallaxAndroid"></a><a href="https://github.com/mallethugo/RealParallaxAndroid" target="_blank" rel="external">RealParallaxAndroid</a></h3><p>具有视觉差特性的viewpager</p>
<p><img src="http://ww1.sinaimg.cn/mw690/005KJayxjw1ezpm9bbe0lg308c0eu4qv.gif" alt=""></p>
<p><a href="https://github.com/bopbi/RecyclerParallax" target="_blank" rel="external">RecyclerParallax</a><br>   RecyclerView 滑动视觉差</p>
<h3 id="DashboardViewDemo"><a href="#DashboardViewDemo" class="headerlink" title="DashboardViewDemo"></a><a href="https://github.com/woxingxiao/DashboardViewDemo" target="_blank" rel="external">DashboardViewDemo</a></h3><p>Android自定义仪表盘View，仿汽车速度仪、刻度盘等，可自定义多种模式，简单灵活</p>
<p><img src="https://raw.githubusercontent.com/woxingxiao/DashboardViewDemo/master/screenshot/Screenshot6.gif" alt=""></p>
<h3 id="NewPipe"><a href="#NewPipe" class="headerlink" title="NewPipe"></a><a href="https://github.com/theScrabi/NewPipe" target="_blank" rel="external">NewPipe</a></h3><p>一个轻量的android开源项目,可以搜索视频，观看youtbe视频,下载视频(实验阶段)<br><img src="http://ww2.sinaimg.cn/large/005KJayxjw1ezpm7bs3j2j317i0oigs9.jpg" alt=""></p>
<h3 id="GestureViews"><a href="#GestureViews" class="headerlink" title="GestureViews"></a><a href="https://github.com/alexvasilkov/GestureViews" target="_blank" rel="external">GestureViews</a></h3><p> 图片支持手势缩放旋转的开源项目</p>
<p><img src="https://github.com/alexvasilkov/GestureViews/raw/master/sample/art/demo.gif" alt=""></p>
<h3 id="FishBun"><a href="#FishBun" class="headerlink" title="FishBun"></a><a href="https://github.com/sangcomz/FishBun" target="_blank" rel="external">FishBun</a></h3><p>图片选择库</p>
<p><img src="https://github.com/sangcomz/FishBun/blob/master/pic/sim.gif?raw=true" alt=""></p>
<h3 id="BlurZoomGallery"><a href="#BlurZoomGallery" class="headerlink" title="BlurZoomGallery"></a><a href="https://github.com/fafaldo/BlurZoomGallery" target="_blank" rel="external">BlurZoomGallery</a></h3><p>继承自CoordinatorLayout，可伸缩折叠toolbarlayout,模糊背景图</p>
<p><img src="http://ww1.sinaimg.cn/large/005KJayxjw1ezprgcdunkg30ao0hsx6v.gif" alt=""></p>
<h3 id="TextSurface"><a href="#TextSurface" class="headerlink" title="TextSurface"></a><a href="https://github.com/elevenetc/TextSurface" target="_blank" rel="external">TextSurface</a></h3><p>一个动画框架帮助你以个性的方式展现信息<br><img src="https://raw.githubusercontent.com/elevenetc/TextSurface/master/docs/demo.gif" alt=""></p>
<h3 id="plaid"><a href="#plaid" class="headerlink" title="plaid"></a><a href="https://github.com/nickbutcher/plaid" target="_blank" rel="external">plaid</a></h3><p>一个基于materialdesign规范开发的开源项目.</p>
<p><img src="http://ww1.sinaimg.cn/large/005KJayxjw1ezps3p100yg30b40jrnpm.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>可以滑动的recyclerview CardItem、高效的Gif播放器、视觉差viewpager、自定义仪表盘、开源视频项目、GestureViews、图片选择库、Custome CoordinatorLayout、个性动态展示文字、基于materialDesign的开源项目</p>]]>
    
    </summary>
    
      <category term="开源库" scheme="http://www.turegeek.com/categories/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[十个开源库分享(一)]]></title>
    <link href="http://www.turegeek.com/2015/12/30/open-source-01/"/>
    <id>http://www.turegeek.com/2015/12/30/open-source-01/</id>
    <published>2015-12-29T16:00:00.000Z</published>
    <updated>2016-01-21T16:28:25.000Z</updated>
    <content type="html"><![CDATA[<p>仿twitter like动画、android 动态加载技术系列、支持手势缩放的TextView、倾斜45°显示文字的lableView、<br>类似于flowlayout的扩展、微博话题功能、富文本编辑器、为listView、gridView…添加阻尼效果、仿Tinder的卡片效果</p>
<a id="more"></a>
<ol>
<li><h3 id="Twitter_u7684like_u52A8_u753B_28for_any_view_29"><a href="#Twitter_u7684like_u52A8_u753B_28for_any_view_29" class="headerlink" title="Twitter的like动画(for any view)"></a><a href="https://github.com/hanks-zyh/SmallBang" target="_blank" rel="external">Twitter的like动画(for any view)</a></h3><p> <img src="http://ww4.sinaimg.cn/large/005KJayxjw1ezhkhn2yr2g308w0f3abj.gif" alt=""></p>
</li>
<li><h3 id="u53E6_u5916_u4E00_u79CD_u4EFFtwitter_like_animation"><a href="#u53E6_u5916_u4E00_u79CD_u4EFFtwitter_like_animation" class="headerlink" title="另外一种仿twitter like animation"></a><a href="https://github.com/frogermcs/LikeAnimation" target="_blank" rel="external">另外一种仿twitter like animation</a></h3><p> <img src="http://ww3.sinaimg.cn/large/005KJayxjw1ezhkijear8g305b05bt9p.gif" alt=""></p>
</li>
<li><h3 id="Android-Plugin-Framework"><a href="#Android-Plugin-Framework" class="headerlink" title="Android-Plugin-Framework"></a><a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">Android-Plugin-Framework</a></h3><p> 此项目是Android插件开发框架完整源码及示例。用来通过动态加载的方式在宿主程序中运行插件APK。在此附上关于动态加载技术的一些文章供了解</p>
<p> <a href="http://segmentfault.com/a/1190000004086213" target="_blank" rel="external">Android动态加载技术 系列索引</a></p>
<p> <a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团Android DEX自动拆包及动态加载简介</a><br> <a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">DynamicAPK已经在携程旅行Android App中使用</a><br> <a href="http://www.infoq.com/cn/articles/android-dynamic-loading?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=articles_link&amp;utm_content=link_text" target="_blank" rel="external">Android动态加载技术三个关键问题详解</a></p>
</li>
<li><h3 id="ZoomTextView"><a href="#ZoomTextView" class="headerlink" title="ZoomTextView"></a><a href="https://github.com/nomanr/ZoomTextView" target="_blank" rel="external">ZoomTextView</a></h3><p> 支持手势缩放的自定义 TextView，控件本身和文字都会随着手势同时放大和缩小。<br> <img src="http://ww4.sinaimg.cn/large/005KJayxjw1ezhkjjik80g30dc0a0b29.gif" alt=""></p>
</li>
<li><h3 id="FlycoLabelView"><a href="#FlycoLabelView" class="headerlink" title="FlycoLabelView"></a><a href="https://github.com/H07000223/FlycoLabelView" target="_blank" rel="external">FlycoLabelView</a></h3><p> 自定义的标签view</p>
<p> <img src="http://ww3.sinaimg.cn/large/005KJayxjw1ezhjmogodfj309m06ugmh.jpg" alt=""></p>
</li>
<li><h3 id="Hashtags"><a href="#Hashtags" class="headerlink" title="Hashtags"></a><a href="https://github.com/davidbeloo/Hashtags" target="_blank" rel="external">Hashtags</a></h3><p> 基于一个开源项目flowlayout开发的标签控件,动态标签大小,标签大小自适应,超过一行自动换行,标签可点击,支持各种gravity选项<br> <img src="http://ww1.sinaimg.cn/large/005KJayxjw1ezhptodjl4j30b90k0dgt.jpg" alt=""></p>
</li>
<li><h3 id="HashTagHelper"><a href="#HashTagHelper" class="headerlink" title="HashTagHelper"></a><a href="https://github.com/Danylo2006/HashTagHelper" target="_blank" rel="external">HashTagHelper</a></h3><p> 一个高亮显示#开头工具,支持点击事件,类似微博话题</p>
<p> <img src="http://ww4.sinaimg.cn/large/005KJayxjw1ezhpva5s1rg307i0dck2s.gif" alt=""></p>
</li>
<li><h3 id="https_3A//github-com/mthli/Knife"><a href="#https_3A//github-com/mthli/Knife" class="headerlink" title="https://github.com/mthli/Knife"></a><a href="https://github.com/mthli/Knife" target="_blank" rel="external">https://github.com/mthli/Knife</a></h3><p>富文本编辑器,支持android4.0+<br><img src="http://ww1.sinaimg.cn/large/005KJayxjw1ezhkl7sp9wg30dc0ca1kx.gif" alt=""></p>
</li>
<li><h3 id="overscroll-decor"><a href="#overscroll-decor" class="headerlink" title="overscroll-decor"></a><a href="https://github.com/EverythingMe/overscroll-decor" target="_blank" rel="external">overscroll-decor</a></h3><p> 为recyclerView、listView、GridView、ScrollView、or AnyView增加类似IOS阻尼效果</p>
<p> <img src="http://ww1.sinaimg.cn/large/005KJayxjw1ezhpqdbweag305l09n1kz.gif" alt=""></p>
</li>
<li><h3 id="android-card-slide-panel"><a href="#android-card-slide-panel" class="headerlink" title="android-card-slide-panel"></a><a href="https://github.com/xmuSistone/android-card-slide-panel" target="_blank" rel="external">android-card-slide-panel</a></h3><p>仿tinder卡片滑动切换 </p>
<p><img src="http://ww2.sinaimg.cn/large/005KJayxjw1ezhprq4uc6g30c20k0qv5.gif" alt=""></p>
<p>这里给另外一个类似的开源项目</p>
<p><a href="https://github.com/aaronbond/Swipe-Deck" target="_blank" rel="external">Swipe-Deck</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>仿twitter like动画、android 动态加载技术系列、支持手势缩放的TextView、倾斜45°显示文字的lableView、<br>类似于flowlayout的扩展、微博话题功能、富文本编辑器、为listView、gridView…添加阻尼效果、仿Tinder的卡片效果</p>]]>
    
    </summary>
    
      <category term="开源库" scheme="http://www.turegeek.com/categories/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[App版本号定义与说明基础知识]]></title>
    <link href="http://www.turegeek.com/2015/12/29/version-tips/"/>
    <id>http://www.turegeek.com/2015/12/29/version-tips/</id>
    <published>2015-12-28T16:00:00.000Z</published>
    <updated>2016-01-21T16:51:59.000Z</updated>
    <content type="html"><![CDATA[<p>版本号(version number)是版本的标识号。每一个操作系统（或广义的讲，每一个软件）都有一个版本号,有些童鞋对于版本号的定义规则或者当前版本号代表什么意思,升级开源库或者设置版本号应该规避那些问题可能只有一些模糊的概念,因此大概的描述下关于版本号定义的基础知识.</p>
<a id="more"></a>
<h3 id="u7248_u672C_u63A7_u5236_u6BD4_u8F83_u666E_u904D_u7684_u4E09_u79CD_u547D_u540D_u683C_u5F0F"><a href="#u7248_u672C_u63A7_u5236_u6BD4_u8F83_u666E_u904D_u7684_u4E09_u79CD_u547D_u540D_u683C_u5F0F" class="headerlink" title="版本控制比较普遍的三种命名格式"></a>版本控制比较普遍的三种命名格式</h3><ol>
<li><p>GNU 风格的版本号命名格式</p>
<p> 主版本号 . 次版本号 [. 修正版本号 [. 编译版本号 ]]</p>
<p> 示例 : 1.2.1, 2.0, 5.0.0 build-13124</p>
</li>
<li><p>Windows 风格的版本号命名格式 :</p>
<p> 主版本号 . 次版本号 [ 修正版本号 [. 编译版本号 ]]</p>
<p> 示例: 1.21, 2.0</p>
</li>
<li><p>Net Framework 风格的版本号命名格式:</p>
<p> 主版本号.次版本号[.编译版本号[.修正版本号]]</p>
<p> 版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选    的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的    部分都必须是大于或等于 0 的整数。</p>
</li>
</ol>
<h3 id="GNU_u7248_u672C_u8BF4_u660E"><a href="#GNU_u7248_u672C_u8BF4_u660E" class="headerlink" title="GNU版本说明"></a>GNU版本说明</h3><pre><code>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：

主版本号：当你做了不兼容的 API 修改

次版本号：当你做了向下兼容的功能性新增

修订号：当你做了向下兼容的问题修正
</code></pre><h4 id="u4E3B_u7248_u672C_u53F7_3A"><a href="#u4E3B_u7248_u672C_u53F7_3A" class="headerlink" title="主版本号:"></a>主版本号:</h4><p>主版本代表不向下兼容的API的新增,在APP里表示大版本更新<br>项目开发初期在API不稳定的情况下,一般以0开始,表示该项目公共API不稳定,随时可能会变.<br>正式稳定版、APP第一版以1开始,当项目发生大的变化的时候主版本号++,次版本号以及修订号归零</p>
<h4 id="u6B21_u7248_u672C_u53F7_3A"><a href="#u6B21_u7248_u672C_u53F7_3A" class="headerlink" title="次版本号:"></a>次版本号:</h4><p>次版本号标示做了兼容旧API的处理,在APP里表示在原有的基础上增加了部分功能时候++,修订号归零</p>
<h4 id="u4FEE_u8BA2_u53F7_3A"><a href="#u4FEE_u8BA2_u53F7_3A" class="headerlink" title="修订号:"></a>修订号:</h4><p>项目的bug修复以及小范围更改,APP同理</p>
<h3 id="u7248_u672C_u53F7_u89C4_u5219_u8BF4_u660E"><a href="#u7248_u672C_u53F7_u89C4_u5219_u8BF4_u660E" class="headerlink" title="版本号规则说明"></a>版本号规则说明</h3><p>在平常开发的时候,我们会引用一些第三方的jar包或者compile一些开源的library,通过上述说明,我们可以根据引用的jar包、类库的版本号,适当的去升级.比如说引用一个第三方的库xxx-2.1,那我们在后期可以放心的使用&gt;=2.1、&lt;3.0之内所有版本更新,因为主版本号不变的情况下,只是修改了次版本号(向下兼容的修改和新增)、修订号(bug的修复),不会出现兼容问题,主版本增加了不兼容旧版本的修改</p>
<blockquote>
<p><a href="http://semver.org/" target="_blank" rel="external">语义化版本说明</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>版本号(version number)是版本的标识号。每一个操作系统（或广义的讲，每一个软件）都有一个版本号,有些童鞋对于版本号的定义规则或者当前版本号代表什么意思,升级开源库或者设置版本号应该规避那些问题可能只有一些模糊的概念,因此大概的描述下关于版本号定义的基础知识.</p>]]>
    
    </summary>
    
      <category term="App规范" scheme="http://www.turegeek.com/categories/App%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于dpi、dp与sp的解释与适配]]></title>
    <link href="http://www.turegeek.com/2015/11/13/dpi-tips/"/>
    <id>http://www.turegeek.com/2015/11/13/dpi-tips/</id>
    <published>2015-11-12T16:00:00.000Z</published>
    <updated>2016-01-21T16:54:11.000Z</updated>
    <content type="html"><![CDATA[<p>做android开发还有面试的时候经验会遇到屏幕适配问题,Android由于机型太多,所以导致屏幕尺寸还有分辨率多样化.接下来讲解下DP、DPI、SP的概念,有些不对的地方欢迎指正</p>
<p>引用Andorid官方文档的说明</p>
<blockquote>
<p>When adding support for multiple screens, applications do not work directly with resolution; applications should be concerned only with screen size and density, as specified by the generalized size and density groups.</p>
</blockquote>
<p>所以关于适配主要根据手机屏幕大小和屏幕密度</p>
<a id="more"></a>
<h3 id="u4EC0_u4E48_u662FDPI"><a href="#u4EC0_u4E48_u662FDPI" class="headerlink" title="什么是DPI"></a>什么是DPI</h3><p>DPI(Dots Per Inch)表示屏幕密度,按字面意思理解就是每一英寸有多少个像素点,例如320DPI就表示一个Inch包含320个像素点.Android DPI也可以理解为PPI</p>
<p>一般我们说手机多少寸,是指手机屏幕对角线的长度,因此可以根据手机屏幕尺寸还有分辨率计算手机的DPI,比如MOTO X(1920*1080)、5.2英寸</p>
<pre><code>DPI = Math.sqrt(1920*1920+1080*1080)/5.2
</code></pre><p>通过计算得出MOTO X的屏幕密度为424DPI</p>
<p>DP与PX的换算公式:</p>
<pre><code>px = dp*(dpi/160)
</code></pre><p>也就是说如果要保持图片的大小统一,需要根据DPI提供不同的切图.<br>我们现在看下dp与英寸的关系,假设有一款手机Y也是5.2寸屏幕,分辨率是(1280*768),DPI计算后为287,由上面的公式可以计算出1dp对应多少英寸</p>
<pre><code>Y = 1*(287/160)*(5.2/Math.sqrt(1280*1280+768*768))
Y = 0.0062...
</code></pre><p>然后我们计算MOTO X 1dp对应多少英寸</p>
<pre><code>MOTO X = 1*（424/160）*(5.2/Math.sqrt(1920*1920+1080*1080))
MOTO X = 0.062...
</code></pre><p>通过上述我们可以得出一个结论dp可以保证所有设备大小的统一</p>
<h4 id="u5047_u5982_u9879_u76EE_u91CC_u53EA_u63D0_u4F9B_u4E00_u5957_u5207_u56FE"><a href="#u5047_u5982_u9879_u76EE_u91CC_u53EA_u63D0_u4F9B_u4E00_u5957_u5207_u56FE" class="headerlink" title="假如项目里只提供一套切图"></a>假如项目里只提供一套切图</h4><ol>
<li><p>如果要保持统一的物理大小,高DPI下图会被放大,低DPI下图会被缩小.</p>
</li>
<li><p>如果不保持统一的物理大小,高DPI下图被缩小,低DPI下图被放大</p>
</li>
</ol>
<h3 id="u4EC0_u4E48_u662FSP"><a href="#u4EC0_u4E48_u662FSP" class="headerlink" title="什么是SP"></a>什么是SP</h3><p>用于设置字体大小,因为手机可以设置大中小字体调整字体大小,所以特地设置的单位</p>
<h3 id="u4E0D_u540C_u5C4F_u5E55_u5BC6_u5EA6_u7684_u53C2_u7167_u56FE"><a href="#u4E0D_u540C_u5C4F_u5E55_u5BC6_u5EA6_u7684_u53C2_u7167_u56FE" class="headerlink" title="不同屏幕密度的参照图"></a>不同屏幕密度的参照图</h3><p><img src="http://img1.tbcdn.cn/L1/461/1/7d691bde9a6f414a5f93082b0312c1589289494d" alt="参考了简书的某篇文章附链接"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>做android开发还有面试的时候经验会遇到屏幕适配问题,Android由于机型太多,所以导致屏幕尺寸还有分辨率多样化.接下来讲解下DP、DPI、SP的概念,有些不对的地方欢迎指正</p>
<p>引用Andorid官方文档的说明</p>
<blockquote>
<p>When adding support for multiple screens, applications do not work directly with resolution; applications should be concerned only with screen size and density, as specified by the generalized size and density groups.</p>
</blockquote>
<p>所以关于适配主要根据手机屏幕大小和屏幕密度</p>]]>
    
    </summary>
    
      <category term="App规范" scheme="http://www.turegeek.com/categories/App%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hugo搭建个人博客]]></title>
    <link href="http://www.turegeek.com/2015/11/12/hugo-help/"/>
    <id>http://www.turegeek.com/2015/11/12/hugo-help/</id>
    <published>2015-11-11T16:00:00.000Z</published>
    <updated>2016-01-19T14:27:53.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><a href="/www.gohugo.org">参考了Hugo中文文档</a>、<a href="http://blog.coderzh.com/2015/08/29/hugo/" target="_blank" rel="external">CoderZH Blog</a></p>
</blockquote>
<h3 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h3><p>Hugo是一个静态网站生成器,使用起来非常方便简单.个人认为程序员必须要有一个自己的博客,不只是以后找工作有加分,最重要的是对自己的知识点、经验、爬坑的总结,理解是一回事,能写出来让大家理解又是另外一回事.</p>
<h3 id="u5B89_u88C5Hugo"><a href="#u5B89_u88C5Hugo" class="headerlink" title="安装Hugo"></a>安装Hugo</h3><p>本文章是针对mac系统的配置,其他系统仅供参考</p>
<ol>
<li><a href="https://github.com/spf13/hugo/releases" target="_blank" rel="external">Hugo Releases</a>下载对应系统的二进制文件:<a href="https://github.com/spf13/hugo/releases/download/v0.14/hugo_0.14_darwin_amd64.zip" target="_blank" rel="external">hugo_0.14_darwin_amd64.zip</a><br></li>
<li>下载完解压将文件重命名为hugo<br></li>
<li>然后放入/usr/local/bin目录下</li>
</ol>
<h3 id="u4F7F_u7528Hugo_u751F_u6210_u81EA_u5DF1_u7684_u7AD9_u70B9"><a href="#u4F7F_u7528Hugo_u751F_u6210_u81EA_u5DF1_u7684_u7AD9_u70B9" class="headerlink" title="使用Hugo生成自己的站点"></a>使用Hugo生成自己的站点</h3><h4 id="u521B_u5EFA_u4E00_u4E2A_u7AD9_u70B9_u76EE_u5F55_u5982/_u2026/_u2026/Documents/blog"><a href="#u521B_u5EFA_u4E00_u4E2A_u7AD9_u70B9_u76EE_u5F55_u5982/_u2026/_u2026/Documents/blog" class="headerlink" title="创建一个站点目录如/…/…/Documents/blog"></a>创建一个站点目录如/…/…/Documents/blog</h4><p> <code>$ hugo new site.../Documents/blog</code></p>
<h4 id="u7136_u540EHugo_u4F1A_u5728blog_u76EE_u5F55_u4E0B_u521B_u5EFA_u4E00_u4E2A_u7AD9_u70B9_u76EE_u5F55_u7ED3_u6784_3A"><a href="#u7136_u540EHugo_u4F1A_u5728blog_u76EE_u5F55_u4E0B_u521B_u5EFA_u4E00_u4E2A_u7AD9_u70B9_u76EE_u5F55_u7ED3_u6784_3A" class="headerlink" title="然后Hugo会在blog目录下创建一个站点目录结构:"></a>然后Hugo会在blog目录下创建一个站点目录结构:</h4><pre><code>▸ archetypes/
▸ content/   //存放markdown文章
▸ layouts/   //存放网站模板文件
▸ static/    //存放静态图片
config.toml   //网站配置文件(可以配置baseurl、title、theme等)
</code></pre><h4 id="cd_u5230blog_u76EE_u5F55_3A"><a href="#cd_u5230blog_u76EE_u5F55_3A" class="headerlink" title="cd到blog目录:"></a>cd到blog目录:</h4><p><code>$ cd ../../Documents/blog</code></p>
<h4 id="u521B_u5EFA_u4E00_u4E2A_u535A_u6587_28_u6700_u597D_u653E_u5728content/post/_u76EE_u5F55_u4E0B_29_3A"><a href="#u521B_u5EFA_u4E00_u4E2A_u535A_u6587_28_u6700_u597D_u653E_u5728content/post/_u76EE_u5F55_u4E0B_29_3A" class="headerlink" title="创建一个博文(最好放在content/post/目录下):"></a>创建一个博文(最好放在content/post/目录下):</h4><p><code>$ hugo new post/hello_Hugo.md</code></p>
<p>Hugo默认的是TOML格式的,至于其他格式,请自行了解</p>
<pre><code>+++
date = &quot;2015-10-25T08:36:54-07:00&quot;
draft = true
title = &quot;hello,Hugo&quot;

+++

正文内容
</code></pre><p>date格式自行设置,title为文章标题</p>
<h3 id="u535A_u5BA2_u6A21_u677F"><a href="#u535A_u5BA2_u6A21_u677F" class="headerlink" title="博客模板"></a>博客模板</h3><p>点击<a href="http://www.gohugo.org/theme/" target="_blank" rel="external">模板列表</a>自行挑选喜欢的模板,并复制对应git地址,如AIR主题<br>在上面创建的blog目录下创建themes目录</p>
<pre><code>cd themes
git clone https://github.com/syui/hugo-theme-air.git
</code></pre><p>你可以在themes目录下针对模板的布局还有CSS样式进行自定义</p>
<h3 id="u5F00_u59CB_u4F60_u7684_u535A_u5BA2_u4E4B_u65C5"><a href="#u5F00_u59CB_u4F60_u7684_u535A_u5BA2_u4E4B_u65C5" class="headerlink" title="开始你的博客之旅"></a>开始你的博客之旅</h3><p>在站点根目录执行命令:</p>
<pre><code>$ hugo server --theme=hugo-theme-air --buildDrafts --watch
</code></pre><p>watch参数可以在你修改博客的时候保持实时刷新,执行命令后会有以下提醒:</p>
<pre><code>Web Server is available at http://127.0.0.1:1313/
Press Ctrl+C to stop
</code></pre><p>打开对应的网址,就可以看到对应模板效果的博客</p>
<h3 id="Github_pages_u90E8_u7F72"><a href="#Github_pages_u90E8_u7F72" class="headerlink" title="Github pages部署"></a>Github pages部署</h3><p>在自己的github里创建个Repository,命名xxxx.github.io(xxxx为你的github用户名)</p>
<p>在站点根目录执行以下命令,会自动生成关于github路径的静态页面:</p>
<pre><code>$ hugo --theme=hugo-theme-air --baseUrl=&quot;http://xxxx.github.io/&quot;
</code></pre><p>Ok,这个时候你打开站点目录的public目录下,可以看到生成的所有静态页面</p>
<p>最后一步,把生成的静态页面push到github的master分支就可以了,推荐个mac git工具SourceTree,配置好路径,这样以后每次你写完文章直接push就可以了,以下为使用命令初始化、push</p>
<pre><code>$ cd public
$ git init
$ git remote add origin https://github.com/xxxx/xxxx.github.io.git
$ git add -A
$ git commit -m &quot;first commit for blog&quot;
$ git push -u origin master
</code></pre><h3 id="Mac_Markdown_u5DE5_u5177_u63A8_u8350Mou"><a href="#Mac_Markdown_u5DE5_u5177_u63A8_u8350Mou" class="headerlink" title="Mac Markdown工具推荐Mou"></a>Mac Markdown工具推荐<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><a href="/www.gohugo.org">参考了Hugo中文文档</a>、<a href="http://blog.coderzh.com/2015/08/29/hugo/" target="_blank" rel="external">]]>
    </summary>
    
  </entry>
  
</feed>